# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cdataio')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cdataio')
    _cdataio = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cdataio', [dirname(__file__)])
        except ImportError:
            import _cdataio
            return _cdataio
        if fp is not None:
            try:
                _mod = imp.load_module('_cdataio', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cdataio = swig_import_helper()
    del swig_import_helper
else:
    import _cdataio
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cdataio.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _cdataio.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cdataio.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cdataio.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cdataio.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cdataio.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cdataio.SwigPyIterator_copy(self)

    def next(self):
        return _cdataio.SwigPyIterator_next(self)

    def __next__(self):
        return _cdataio.SwigPyIterator___next__(self)

    def previous(self):
        return _cdataio.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cdataio.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cdataio.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cdataio.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cdataio.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cdataio.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cdataio.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cdataio.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cdataio.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class _string_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _string_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _string_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cdataio._string_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cdataio._string_list___nonzero__(self)

    def __bool__(self):
        return _cdataio._string_list___bool__(self)

    def __len__(self):
        return _cdataio._string_list___len__(self)

    def __getslice__(self, i, j):
        return _cdataio._string_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cdataio._string_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cdataio._string_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cdataio._string_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cdataio._string_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cdataio._string_list___setitem__(self, *args)

    def pop(self):
        return _cdataio._string_list_pop(self)

    def append(self, x):
        return _cdataio._string_list_append(self, x)

    def empty(self):
        return _cdataio._string_list_empty(self)

    def size(self):
        return _cdataio._string_list_size(self)

    def swap(self, v):
        return _cdataio._string_list_swap(self, v)

    def begin(self):
        return _cdataio._string_list_begin(self)

    def end(self):
        return _cdataio._string_list_end(self)

    def rbegin(self):
        return _cdataio._string_list_rbegin(self)

    def rend(self):
        return _cdataio._string_list_rend(self)

    def clear(self):
        return _cdataio._string_list_clear(self)

    def get_allocator(self):
        return _cdataio._string_list_get_allocator(self)

    def pop_back(self):
        return _cdataio._string_list_pop_back(self)

    def erase(self, *args):
        return _cdataio._string_list_erase(self, *args)

    def __init__(self, *args):
        this = _cdataio.new__string_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _cdataio._string_list_push_back(self, x)

    def front(self):
        return _cdataio._string_list_front(self)

    def back(self):
        return _cdataio._string_list_back(self)

    def assign(self, n, x):
        return _cdataio._string_list_assign(self, n, x)

    def resize(self, *args):
        return _cdataio._string_list_resize(self, *args)

    def insert(self, *args):
        return _cdataio._string_list_insert(self, *args)

    def reserve(self, n):
        return _cdataio._string_list_reserve(self, n)

    def capacity(self):
        return _cdataio._string_list_capacity(self)
    __swig_destroy__ = _cdataio.delete__string_list
    __del__ = lambda self: None
_string_list_swigregister = _cdataio._string_list_swigregister
_string_list_swigregister(_string_list)

class _vector_of_vector_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _vector_of_vector_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _vector_of_vector_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cdataio._vector_of_vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cdataio._vector_of_vector_string___nonzero__(self)

    def __bool__(self):
        return _cdataio._vector_of_vector_string___bool__(self)

    def __len__(self):
        return _cdataio._vector_of_vector_string___len__(self)

    def __getslice__(self, i, j):
        return _cdataio._vector_of_vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cdataio._vector_of_vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cdataio._vector_of_vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cdataio._vector_of_vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cdataio._vector_of_vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cdataio._vector_of_vector_string___setitem__(self, *args)

    def pop(self):
        return _cdataio._vector_of_vector_string_pop(self)

    def append(self, x):
        return _cdataio._vector_of_vector_string_append(self, x)

    def empty(self):
        return _cdataio._vector_of_vector_string_empty(self)

    def size(self):
        return _cdataio._vector_of_vector_string_size(self)

    def swap(self, v):
        return _cdataio._vector_of_vector_string_swap(self, v)

    def begin(self):
        return _cdataio._vector_of_vector_string_begin(self)

    def end(self):
        return _cdataio._vector_of_vector_string_end(self)

    def rbegin(self):
        return _cdataio._vector_of_vector_string_rbegin(self)

    def rend(self):
        return _cdataio._vector_of_vector_string_rend(self)

    def clear(self):
        return _cdataio._vector_of_vector_string_clear(self)

    def get_allocator(self):
        return _cdataio._vector_of_vector_string_get_allocator(self)

    def pop_back(self):
        return _cdataio._vector_of_vector_string_pop_back(self)

    def erase(self, *args):
        return _cdataio._vector_of_vector_string_erase(self, *args)

    def __init__(self, *args):
        this = _cdataio.new__vector_of_vector_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _cdataio._vector_of_vector_string_push_back(self, x)

    def front(self):
        return _cdataio._vector_of_vector_string_front(self)

    def back(self):
        return _cdataio._vector_of_vector_string_back(self)

    def assign(self, n, x):
        return _cdataio._vector_of_vector_string_assign(self, n, x)

    def resize(self, *args):
        return _cdataio._vector_of_vector_string_resize(self, *args)

    def insert(self, *args):
        return _cdataio._vector_of_vector_string_insert(self, *args)

    def reserve(self, n):
        return _cdataio._vector_of_vector_string_reserve(self, n)

    def capacity(self):
        return _cdataio._vector_of_vector_string_capacity(self)
    __swig_destroy__ = _cdataio.delete__vector_of_vector_string
    __del__ = lambda self: None
_vector_of_vector_string_swigregister = _cdataio._vector_of_vector_string_swigregister
_vector_of_vector_string_swigregister(_vector_of_vector_string)

class _map_of_string_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _map_of_string_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _map_of_string_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cdataio._map_of_string_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cdataio._map_of_string_string___nonzero__(self)

    def __bool__(self):
        return _cdataio._map_of_string_string___bool__(self)

    def __len__(self):
        return _cdataio._map_of_string_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _cdataio._map_of_string_string___getitem__(self, key)

    def __delitem__(self, key):
        return _cdataio._map_of_string_string___delitem__(self, key)

    def has_key(self, key):
        return _cdataio._map_of_string_string_has_key(self, key)

    def keys(self):
        return _cdataio._map_of_string_string_keys(self)

    def values(self):
        return _cdataio._map_of_string_string_values(self)

    def items(self):
        return _cdataio._map_of_string_string_items(self)

    def __contains__(self, key):
        return _cdataio._map_of_string_string___contains__(self, key)

    def key_iterator(self):
        return _cdataio._map_of_string_string_key_iterator(self)

    def value_iterator(self):
        return _cdataio._map_of_string_string_value_iterator(self)

    def __setitem__(self, *args):
        return _cdataio._map_of_string_string___setitem__(self, *args)

    def asdict(self):
        return _cdataio._map_of_string_string_asdict(self)

    def __init__(self, *args):
        this = _cdataio.new__map_of_string_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _cdataio._map_of_string_string_empty(self)

    def size(self):
        return _cdataio._map_of_string_string_size(self)

    def swap(self, v):
        return _cdataio._map_of_string_string_swap(self, v)

    def begin(self):
        return _cdataio._map_of_string_string_begin(self)

    def end(self):
        return _cdataio._map_of_string_string_end(self)

    def rbegin(self):
        return _cdataio._map_of_string_string_rbegin(self)

    def rend(self):
        return _cdataio._map_of_string_string_rend(self)

    def clear(self):
        return _cdataio._map_of_string_string_clear(self)

    def get_allocator(self):
        return _cdataio._map_of_string_string_get_allocator(self)

    def count(self, x):
        return _cdataio._map_of_string_string_count(self, x)

    def erase(self, *args):
        return _cdataio._map_of_string_string_erase(self, *args)

    def find(self, x):
        return _cdataio._map_of_string_string_find(self, x)

    def lower_bound(self, x):
        return _cdataio._map_of_string_string_lower_bound(self, x)

    def upper_bound(self, x):
        return _cdataio._map_of_string_string_upper_bound(self, x)
    __swig_destroy__ = _cdataio.delete__map_of_string_string
    __del__ = lambda self: None
_map_of_string_string_swigregister = _cdataio._map_of_string_string_swigregister
_map_of_string_string_swigregister(_map_of_string_string)

class _vector_map_of_string_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _vector_map_of_string_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _vector_map_of_string_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cdataio._vector_map_of_string_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cdataio._vector_map_of_string_string___nonzero__(self)

    def __bool__(self):
        return _cdataio._vector_map_of_string_string___bool__(self)

    def __len__(self):
        return _cdataio._vector_map_of_string_string___len__(self)

    def __getslice__(self, i, j):
        return _cdataio._vector_map_of_string_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cdataio._vector_map_of_string_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cdataio._vector_map_of_string_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cdataio._vector_map_of_string_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cdataio._vector_map_of_string_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cdataio._vector_map_of_string_string___setitem__(self, *args)

    def pop(self):
        return _cdataio._vector_map_of_string_string_pop(self)

    def append(self, x):
        return _cdataio._vector_map_of_string_string_append(self, x)

    def empty(self):
        return _cdataio._vector_map_of_string_string_empty(self)

    def size(self):
        return _cdataio._vector_map_of_string_string_size(self)

    def swap(self, v):
        return _cdataio._vector_map_of_string_string_swap(self, v)

    def begin(self):
        return _cdataio._vector_map_of_string_string_begin(self)

    def end(self):
        return _cdataio._vector_map_of_string_string_end(self)

    def rbegin(self):
        return _cdataio._vector_map_of_string_string_rbegin(self)

    def rend(self):
        return _cdataio._vector_map_of_string_string_rend(self)

    def clear(self):
        return _cdataio._vector_map_of_string_string_clear(self)

    def get_allocator(self):
        return _cdataio._vector_map_of_string_string_get_allocator(self)

    def pop_back(self):
        return _cdataio._vector_map_of_string_string_pop_back(self)

    def erase(self, *args):
        return _cdataio._vector_map_of_string_string_erase(self, *args)

    def __init__(self, *args):
        this = _cdataio.new__vector_map_of_string_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _cdataio._vector_map_of_string_string_push_back(self, x)

    def front(self):
        return _cdataio._vector_map_of_string_string_front(self)

    def back(self):
        return _cdataio._vector_map_of_string_string_back(self)

    def assign(self, n, x):
        return _cdataio._vector_map_of_string_string_assign(self, n, x)

    def resize(self, *args):
        return _cdataio._vector_map_of_string_string_resize(self, *args)

    def insert(self, *args):
        return _cdataio._vector_map_of_string_string_insert(self, *args)

    def reserve(self, n):
        return _cdataio._vector_map_of_string_string_reserve(self, n)

    def capacity(self):
        return _cdataio._vector_map_of_string_string_capacity(self)
    __swig_destroy__ = _cdataio.delete__vector_map_of_string_string
    __del__ = lambda self: None
_vector_map_of_string_string_swigregister = _cdataio._vector_map_of_string_string_swigregister
_vector_map_of_string_string_swigregister(_vector_map_of_string_string)

class InitParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InitParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InitParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["host"] = _cdataio.InitParams_host_set
    __swig_getmethods__["host"] = _cdataio.InitParams_host_get
    if _newclass:
        host = _swig_property(_cdataio.InitParams_host_get, _cdataio.InitParams_host_set)
    __swig_setmethods__["port"] = _cdataio.InitParams_port_set
    __swig_getmethods__["port"] = _cdataio.InitParams_port_get
    if _newclass:
        port = _swig_property(_cdataio.InitParams_port_get, _cdataio.InitParams_port_set)

    def __init__(self):
        this = _cdataio.new_InitParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cdataio.delete_InitParams
    __del__ = lambda self: None
InitParams_swigregister = _cdataio.InitParams_swigregister
InitParams_swigregister(InitParams)

class EventParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _cdataio.EventParams_name_set
    __swig_getmethods__["name"] = _cdataio.EventParams_name_get
    if _newclass:
        name = _swig_property(_cdataio.EventParams_name_get, _cdataio.EventParams_name_set)
    __swig_setmethods__["paramString"] = _cdataio.EventParams_paramString_set
    __swig_getmethods__["paramString"] = _cdataio.EventParams_paramString_get
    if _newclass:
        paramString = _swig_property(_cdataio.EventParams_paramString_get, _cdataio.EventParams_paramString_set)
    __swig_setmethods__["paramInt"] = _cdataio.EventParams_paramInt_set
    __swig_getmethods__["paramInt"] = _cdataio.EventParams_paramInt_get
    if _newclass:
        paramInt = _swig_property(_cdataio.EventParams_paramInt_get, _cdataio.EventParams_paramInt_set)

    def __init__(self):
        this = _cdataio.new_EventParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cdataio.delete_EventParams
    __del__ = lambda self: None
EventParams_swigregister = _cdataio.EventParams_swigregister
EventParams_swigregister(EventParams)

class PoolInitParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolInitParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoolInitParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _cdataio.PoolInitParams_name_set
    __swig_getmethods__["name"] = _cdataio.PoolInitParams_name_get
    if _newclass:
        name = _swig_property(_cdataio.PoolInitParams_name_get, _cdataio.PoolInitParams_name_set)
    __swig_setmethods__["size"] = _cdataio.PoolInitParams_size_set
    __swig_getmethods__["size"] = _cdataio.PoolInitParams_size_get
    if _newclass:
        size = _swig_property(_cdataio.PoolInitParams_size_get, _cdataio.PoolInitParams_size_set)
    __swig_setmethods__["subBatchSize"] = _cdataio.PoolInitParams_subBatchSize_set
    __swig_getmethods__["subBatchSize"] = _cdataio.PoolInitParams_subBatchSize_get
    if _newclass:
        subBatchSize = _swig_property(_cdataio.PoolInitParams_subBatchSize_get, _cdataio.PoolInitParams_subBatchSize_set)
    __swig_setmethods__["trainBatchSize"] = _cdataio.PoolInitParams_trainBatchSize_set
    __swig_getmethods__["trainBatchSize"] = _cdataio.PoolInitParams_trainBatchSize_get
    if _newclass:
        trainBatchSize = _swig_property(_cdataio.PoolInitParams_trainBatchSize_get, _cdataio.PoolInitParams_trainBatchSize_set)
    __swig_setmethods__["predictMinBatchSize"] = _cdataio.PoolInitParams_predictMinBatchSize_set
    __swig_getmethods__["predictMinBatchSize"] = _cdataio.PoolInitParams_predictMinBatchSize_get
    if _newclass:
        predictMinBatchSize = _swig_property(_cdataio.PoolInitParams_predictMinBatchSize_get, _cdataio.PoolInitParams_predictMinBatchSize_set)
    __swig_setmethods__["predictMaxBatchSize"] = _cdataio.PoolInitParams_predictMaxBatchSize_set
    __swig_getmethods__["predictMaxBatchSize"] = _cdataio.PoolInitParams_predictMaxBatchSize_get
    if _newclass:
        predictMaxBatchSize = _swig_property(_cdataio.PoolInitParams_predictMaxBatchSize_get, _cdataio.PoolInitParams_predictMaxBatchSize_set)

    def __init__(self):
        this = _cdataio.new_PoolInitParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cdataio.delete_PoolInitParams
    __del__ = lambda self: None
PoolInitParams_swigregister = _cdataio.PoolInitParams_swigregister
PoolInitParams_swigregister(PoolInitParams)

class CDataIO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataIO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDataIO, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cdataio.new_CDataIO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initialize(self, params):
        return _cdataio.CDataIO_initialize(self, params)

    def onEvent(self, params):
        return _cdataio.CDataIO_onEvent(self, params)

    def start(self):
        return _cdataio.CDataIO_start(self)

    def close(self):
        return _cdataio.CDataIO_close(self)

    def createPool(self, params):
        return _cdataio.CDataIO_createPool(self, params)
    __swig_destroy__ = _cdataio.delete_CDataIO
    __del__ = lambda self: None
CDataIO_swigregister = _cdataio.CDataIO_swigregister
CDataIO_swigregister(CDataIO)

# This file is compatible with both classic and new-style classes.


